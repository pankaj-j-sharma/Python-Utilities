
# how do you analyse and improve memory performance
# dynamic programming
# how is hash calculated
# design a Dictionary class
# process and a thread in python
# how do you stop a class ineritance
# matrix manipulation , recursion
# flask
# signals in django
# __init_subclass__
# partial functions
# quorum value nosql data
# CAP theoram
# Centry
# CORS headers for DRF
# custom json renderer
# JWT authentication , auth token and refresh token
# secure scret key approaches uuid.uuid4().hex , os.urandom(12) , secrets.token_urlsafe(12)
# JWT token expiration time helps in generating a diffrent token everytime we reauthenticate
# The MIDDLEWARE list is like an onion so each request passes through from top to bottom and
# response is in reverse order (bottom to up).
# middlewares in flask
# implementing 2.7 features of dictionary in python 3.7 where keys are not stored in an order i.e.
# how is Ordereddcit implemented in python ( doubly linked list)
# python rq , asynchronous taks python
# celery

# 1..Pyhton program to replace first occurance of vowels with '-'in a string ,without using dictinaries
# 2. python program to have count of alphabets ,digits and special characters without using dictionaries
# 'practice ' => 'pr-ctice'
# all django exceptions 
# python inheritance 
# microservices benefits 
# usefulness of ec2 
# how do you make call to S3 
# what is drf and how it is useful
# can set have item with immutable data type 
# does python support method overloading

def add(a,b):
    return a+b

def add(a,b,c):
    return a+b+c

def add(a,b,c,d):
    return a*b+c+d

print(add(5,7,5,5))
print(add(5,7))
print(add(5,7,5))

# how to handle database credentials when connecting to multiple databases 
# adding telemetry data to the components 
# asyncio uses 
# connection pooling in Django ORM 
# implementation of pagintation logic from scratch 
# diffrent type of operators in python 
# difference between is and == 
# development server and production server django 
# why do we need to do collectstatic in django , white noise in apache server ?
# dependency injection
# how do you maintain versioning in api v1,v2
# http 1.1 , 1.2 what does it mean
# event loop concept 
# how does django support multithreading 
# django is multithreaded outside but single threaded inside

# how do we identify memory leak in python 
# diffrent stages of CI/CD pipeline
# solid principles python 
# pros and cons of python 
# code review steps 

# Python tuple vs generator

# when to use multithreading and multiprocessing I/O intensive CPU intensive 
# how to implement custom context managers 
# how to implement custom generators  
# code coverage , unit test case 
# apart from mutability principle , why tuples are faster than lists 
# shallow copy and deep copy with examples 
# for else and try else when and which scenario else will be executed 
# django signals how to write 
# orm query for avg sum 
# model inheritance in django 
# how to do data migrations in django 
# what are meta classes and their uses python 
# multiprocessing meaning 
# mock and mock patch in unit testing 

# 0, 1, 1, 2, 3, 5, 8, 13, 21, 34

# def generate_fibonacci(series_length):
#     a,b=0,1
#     for i in range(series_length):
#         if i==0:
#             yield a
#         elif i ==1 : 
#             yield b
#         else:
#             b,a=a+b,b
#             yield b

# for d in generate_fibonacci(10):
#     print(d)

# # nppdvjthqldpwncqszvftbrmjlhg
# #  6 

# def get_unique_marker(data):
#     window=[]
#     marker_postn=0
#     for ch in data:
#         if len(window)==4:
#             break
#         if not window:
#             window.append(ch)
#         else:
#             if ch in window:
#                 marker_postn+=len(window)
#                 window.pop()
#             else:
#                 window.append(ch)
#     return len(window)+marker_postn


# print(get_unique_marker('nppdvjthqldpwncqszvftbrmjlhg'))
# nznrnfrfntjfmvfwmzdfjlvtqnbhcprsg 10

# python static method vs class method

# can you remove django middlewares 
# [] , {} , () which of them consumes lesser space 
# building custom decorators 


